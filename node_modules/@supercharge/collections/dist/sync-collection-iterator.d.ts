export declare class SyncCollectionIterator<T> implements IterableIterator<T> {
    /**
     * Stores the collection items.
     */
    private readonly items;
    /**
     * The next item’s index.
     */
    private pointer;
    /**
     * Create a new iterator for the given `items`.
     *
     * @param items
     */
    constructor(items: T[]);
    /**
     * Returns an iterator instance for the given `items`.
     *
     * @param {T[]} items
     *
     * @returns {SyncCollectionIterator<T>}
     */
    static for<T>(items: T[]): SyncCollectionIterator<T>;
    /**
     * Returns iteself to allow reusing iterators when exiting a loop early (via break, return, etc.).
     *
     * @returns {IterableIterator}
     */
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * Returns the iterator result containing the next item if there’s
     * one available. Returns `undefined` if all items are iterated.
     *
     * @returns {IteratorResult}
     */
    next(): IteratorResult<T>;
}
